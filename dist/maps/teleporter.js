class Teleporter{constructor(e,t,o=null,r=null){this.tileX=e,this.tileY=t,this.code=o,this.mapId=r}getPositionKey(){return`${this.tileX}_${this.tileY}`}serialize(){return{tileX:this.tileX,tileY:this.tileY,code:this.code,mapId:this.mapId}}}class TeleporterManager{constructor(){this.teleportersByPosition=new Map,this.teleportersByCode=new Map,this.teleporterLinks=[]}addTeleporter(e){const t=e.getPositionKey();this.teleportersByPosition.set(t,e),e.code?(this.teleportersByCode.set(e.code,e),console.log(`Added teleporter with code ${e.code} at position ${t}`)):console.log(`Added teleporter at position ${t} (no code yet)`)}getTeleporterByPosition(e,t){const o=`${e}_${t}`;return this.teleportersByPosition.get(o)||null}getTeleporterByCode(e){const t=this.teleportersByCode.get(e)||null;return console.log(`Looking for teleporter with code ${e}: ${t?"FOUND":"NOT FOUND"}`),t}getTeleporterByLink(e,t,o=null){const r=null!==o?`${o},${e},${t}`:`0,${e},${t}`,s=this.teleporterLinks.find((e=>e.fromKey===r));if(s){console.log(`Found teleporter link from ${r} to ${s.toKey}`);const[e,t,o]=s.toKey.split(",").map(Number),l=new Teleporter(t,o);return l.targetMapIndex=e,{teleporter:l,mapIndex:e}}return null}setTeleporterLinks(e){e&&Array.isArray(e)?(this.teleporterLinks=e,console.log(`Set ${e.length} teleporter links`),e.forEach((e=>{const[t,o,r]=e.fromKey.split(",").map(Number),[s,l,i]=e.toKey.split(",").map(Number),n=`${o}_${r}`,p=`map${t}_to_map${s}`;let d=this.teleportersByPosition.get(n);d?d.code||(d.code=p,d.mapId=`map${s}`,this.teleportersByCode.set(p,d)):(d=new Teleporter(o,r,p,`map${s}`),this.addTeleporter(d))}))):console.log("No teleporter links to set or invalid format")}associateTeleporterCodes(e){if(!e||0===e.length)return void console.warn("No teleporter codes available for map");console.log(`Associating ${e.length} teleporter codes`);const t=Array.from(this.teleportersByPosition.keys());for(let o=0;o<e.length;o++){const r=e[o];if(o<t.length){const e=t[o],s=this.teleportersByPosition.get(e);s.code=r.code,s.mapId=r.mapId,this.teleportersByCode.set(r.code,s),console.log(`Associated teleporter at ${e} with code ${r.code} -> ${r.mapId}`)}else console.warn(`Not enough teleporter positions for code ${r.code}`)}}}module.exports={Teleporter,TeleporterManager};